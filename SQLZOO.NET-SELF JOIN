1 TO 3 ARE VERY EASY

4, 
SELECT company, num, COUNT(*)
FROM route WHERE stop=149 OR stop=53
GROUP BY company, num
HAVING COUNT(*)>1;


5,
SELECT a.company, a.num, a.stop, b.stop
FROM route a JOIN route b 
ON (a.company=b.company AND a.num=b.num)
WHERE a.stop=53 and b.stop=149;

For company and num, using either a or b or mixed does not matter. 
this looks like the constructor overloading in programming



6,
SELECT a.company, a.num, stopa.name, stopb.name
FROM route a 
JOIN route b ON (a.company=b.company AND a.num=b.num)
JOIN stops stopa ON (a.stop=stopa.id)
JOIN stops stopb ON (b.stop=stopb.id)
WHERE stopa.name='Craiglockhart'AND stopb.name='London Road';

triple join. a.stop=stopa.id means to match the id on the two tables where id and stop contains the same numbers.

7, similar to 6
select distinct a.company, a.num
from route a
join route b on a.company=b.company and a.num=b.num
join stops c on c.id=a.stop
join stops d on d.id=b.stop
where c.name='Haymarket' and d.name='Leith'

8, also similar
select a.company, a.num
from route a
join route b on a.company=b.company and a.num=b.num
join stops c on c.id=a.stop
join stops d on d.id=b.stop
where c.name='Craiglockhart' and d.name='Tollcross'

9, 
select distinct c.name, a.company, a.num
from route a
join route b on a.company=b.company and a.num=b.num
join stops c on c.id=a.stop
join stops d  on d.id=b.stop
where d.name= 'Craiglockhart';

#distinct c.name and where d.name, or distinct d.name and where c.name. cant be the same. 

10,

