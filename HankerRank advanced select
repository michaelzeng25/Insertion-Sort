1, Type of Triangle

select case
       when A=B and a=c then 'Equilateral'
       when (A=b and a+b>c) or (a=c and a+c>b)  or (b=c and b+c>a)  then 'Isosceles'
       when a+b<=c or a+c<=b or b+c<=a then 'Not A Triangle'
       else 'Scalene '
       end 
from TRIANGLES  

or perhaps something like this:

delimiter //
create function myf(a int, b int, c int) returns varchar(55) deterministic
begin
declare name varchar(55);
if a=b and a=c then set name='Equilateral';
elseif (a=b and a+b>c) or (a=c and a+c>b)  or (b=c and b+c>a)  then set name= 'Isosceles';
elseif a+b<=c or a+c<=b or b+c<=a then set name='Not A Triangle';
else set name='Scalene';
end if;
return(name);
end//
delimiter ;

select myf(a,b,c) from TRIANGLES;




2, The PADS

select a.* 
from
(
select concat(name, '(',left(occupation,1),')') 
from OCCUPATIONS order by name limit 10000
)a

union

select b.* 
from
(
select concat('There are a total of ',a.cnt,' ',lower(a.occupation),'s.') 
from  (select  occupation, count(occupation)as cnt from OCCUPATIONS group by occupation order by count(occupation) , occupation)a
)b;

Without using limit in the first query, the order by will have no affect.
read here: https://dev.mysql.com/doc/refman/5.7/en/union.html




3, Occupation

select min(b.Doctor), min(b.Professor),min(b.Singer),min(b.Actor)
from
(
select 
case 
when Occupation ='Doctor' then (@a:=@a+1)
when Occupation ='Professor' then (@b:=@b+1) 
when Occupation ='Singer' then (@c:=@c+1)
when Occupation ='Actor' then (@d:=@d+1)
end as index1,
case 
when Occupation ='Doctor' then name 
end as Doctor,
case 
when Occupation ='Professor' then name 
end as Professor,
case 
when Occupation ='Singer' then name 
end as Singer,
case 
when Occupation ='Actor' then name 
end as Actor
from 
OCCUPATIONS 
join(select @a:=0, @b:=0,@c:=0,@d:=0 ) w
order by name
)b 
group by index1;

a very good practice in using variables.



4, Binary tree node

select n, 'Leaf' from BST where n not in (select p from BST where p is not null)
union
select n, 'Inner' from BST where n in (select p from BST) and p is not null
union
select n, 'Root' from BST where p is null
order by n

or (inspired by other coders)

SELECT N, 
case 
when p is null then 'Root'
when (SELECT COUNT(*) FROM BST WHERE P=B.N)>0 then 'Inner'
else 'Leaf'
end
FROM BST B 
ORDER BY N;


/*
The code is pretty obvious.
all the leaf node will not be in the 'p' column.
and in the 'p' column, the one that is null is the root, and the rests are inner.

"SELECT COUNT(*) FROM BST WHERE P=B.N)>0 " - leaf nodes only exist in n not in p.

*/



5, New companies
select 
c.company_code, c.founder, a.cnt, a2.cnt, a3.cnt, a4.cnt
from Company c
join
( select company_code, count(distinct lead_manager_code) as cnt from Lead_Manager group by company_code )a
on c.company_code = a.company_code
join
( select company_code, count(distinct Senior_Manager_code) as cnt from Senior_Manager group by company_code)a2
on a.company_code = a2.company_code

join
( select company_code, count(distinct manager_code) as cnt from Manager group by company_code)a3
on a2.company_code = a3.company_code

join
( select company_code, count(distinct Employee_code) as cnt from Employee group by company_code)a4
on a3.company_code = a4.company_code

order by c.company_code asc

/*
must use distinct or many dup will be counted because of the joins
*/


or (inspired by other coders work)



set sql_mode='';
select 
c.company_code, c.founder, count(distinct l.lead_manager_code), count(distinct s.senior_manager_code), 
count( distinct m.manager_code), count(distinct e.employee_code)
from Company c, Lead_Manager l, Senior_Manager s, Manager  m, Employee e
where c.company_code = l.company_code
and l.company_code = s.company_code
and s.company_code = m.company_code
and m.company_code = e.company_code
group by c.company_code
order by c.company_code asc


/*
again, the group by will not work without set sql_mode because c.founder
*/



