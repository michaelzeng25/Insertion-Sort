1, Placements

select s.Name
from Students s
join Friends f on s.id = f.id
join Packages p1 on p1.id=f.id
join Packages p2 on p2.id=f.Friend_id
where p2.Salary > p1.salary
order by p2.salary

/*
1, connect the srtudents and friends table using their id
2, find the salary of the student using student id
3, find the salary of the student's friend using friend id
4, compare the salary
5, order as required
*/




2, Symmetric Pairs

select p1.x, p1.y from Functions p1, Functions p2
where p1.x =p2.y and p1.y = p2.x and p1.x<p1.y

union all

select p1.x, p1.y from Functions p1 
where p1.x=p1.y group by p1.x,p1.y
having count(*) >1
order by x asc

/*
the first section: find symmertic paris by using self-join and compare the value between x1 and y2, x2 and y1.
p1.x<p1.y is important because we have choosen the 2 symmertric pairs. so this code here will make sure it only return 1 pair
(p1.x<p2.x is also fine)

the second section will make sure to return those symmertric pairs that are the same numbers, like 20,20 and 20,20

*/



3, projects


select c.start_date, c.end_date
from
(
  select start_date, min(end_date)as end_date, (min(end_date) - start_date) as cnt
  from 
  ( 
    select start_date from Projects where start_date not in (select end_date from Projects )
  )a,
  ( 
    select end_date from Projects where End_date not in (select start_date from Projects ) 
  )b
  where start_date < end_date
  group by start_date
)c
order by c.cnt , c.start_date

/*
The join between the subqueries a and b will procude a cartasian product, say a=4 rows and b= 5 rows,
each row in a will join each row in b once. thus produce a 4x5=20 rows table

The 2 subqueries a and b give the start and end date of each project

start_date < end_date will make sure each start date will end up with the right end date whithin each project

group by, along with min(end_date), will give the correct end date of that project.

*/

## or

SET sql_mode = ''; -- group by start_date will not work without this
select start_date, min(end_date)as end_date
from 
(
select start_date from Projects where start_date not in (select end_date from Projects ) 
)a,
(
select end_date  from Projects where End_date not in (select start_date from Projects ) 
)b 
where start_date < end_date
group by start_date
order by datediff(end_date, start_date) , start_date

/*
here, group by and datediff will not work without sql_mode.

same idea but shorter code.

group by will keep the minimum end day for each start day in the same project.


datediff give the difference of the given dates. 2015 , 2010 the difference will be 5

*/




4, Interviews

set sql_mode="";
select  cot.contest_id, cot.hacker_id, cot.name, s4.ts, s4.tas, s4.tv, s4.tus
from Contests cot
join
( 
    select col.contest_id, sum(s1.ts) ts, sum(s1.tas)tas, sum(s2.tv)tv, sum(s2.tus)tus
    from Colleges col
    join 
    (
        select cha.college_id,  sum(ss.total_submissions)as ts, sum(ss.total_accepted_submissions) as tas
        from Challenges cha
        left join Submission_Stats ss on ss.challenge_id = cha.challenge_id
		    group by cha.college_id
    )s1
    on s1.college_id= col.college_id
    join
    (
		    select cha.college_id,   sum(vs.total_views)as tv, sum(vs.total_unique_views) as tus
        from Challenges cha
        join View_Stats vs on vs.challenge_id = cha.challenge_id
		    group by cha.college_id
    )s2
    on s2.college_id = col.college_id
    group by col.contest_id
    
)s4 
on cot.contest_id = s4.contest_id
order by cot.contest_id


/*
1, s1 sums up the submissions, and the left join is because one of the challenge id from a college id is not 
in the submission table. So, without this left join, one of the college id will not be included when doing
the join with s2.

2, you then need to find the contest id from college table(cant use college id since some contest id have >1 college id).
3, s4 gives all the sums, and then just simply join it with the contests table.

*/
