1, Placements

select s.Name
from Students s
join Friends f on s.id = f.id
join Packages p1 on p1.id=f.id
join Packages p2 on p2.id=f.Friend_id
where p2.Salary > p1.salary
order by p2.salary

/*
1, connect the srtudents and friends table using their id
2, find the salary of the student using student id
3, find the salary of the student's friend using friend id
4, compare the salary
5, order as required
*/




2, Symmetric Pairs

select p1.x, p1.y from Functions p1, Functions p2
where p1.x =p2.y and p1.y = p2.x and p1.x<p1.y

union all

select p1.x, p1.y from Functions p1 
where p1.x=p1.y group by p1.x,p1.y
having count(*) >1
order by x asc

/*
the first section: find symmertic paris by using self-join and compare the value between x1 and y2, x2 and y1.
p1.x<p1.y is important because we have choosen the 2 symmertric pairs. so this code here will make sure it only return 1 pair
(p1.x<p2.x is also fine)

the second section will make sure to return those symmertric pairs that are the same numbers, like 20,20 and 20,20

*/



3, projects


select c.start_date, c.end_date
from
(
  select start_date, min(end_date)as end_date, (min(end_date) - start_date) as cnt
  from 
  ( 
    select start_date from Projects where start_date not in (select end_date from Projects )
  )a,
  ( 
    select end_date from Projects where End_date not in (select start_date from Projects ) 
  )b
  where start_date < end_date
  group by start_date
)c
order by c.cnt , c.start_date

/*
The join between the subqueries a and b will procude a cartasian product, say a=4 rows and b= 5 rows,
each row in a will join each row in b once. thus produce a 4x5=20 rows table

The 2 subqueries a and b give the start and end date of each project

start_date < end_date will make sure each start date will end up with the right end date whithin each project

group by, along with min(end_date), will give the correct end date of that project.

*/

## or

SET sql_mode = ''; -- group by start_date will not work without this
select start_date, min(end_date)as end_date
from 
(
select start_date from Projects where start_date not in (select end_date from Projects ) 
)a,
(
select end_date  from Projects where End_date not in (select start_date from Projects ) 
)b 
where start_date < end_date
group by start_date
order by datediff(end_date, start_date) , start_date

/*
here, group by and datediff will not work without sql_mode.

same idea but shorter code.

group by will keep the minimum end day for each start day in the same project.


datediff give the difference of the given dates. 2015 , 2010 the difference will be 5

*/
